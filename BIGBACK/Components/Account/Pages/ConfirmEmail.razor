@page "/Account/ConfirmEmail"

@inject SignInManager<BIGBACKUser> SignInManager
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BIGBACK.Data
@inject UserManager<BIGBACKUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ConfirmEmail> Logger

@inject NavigationManager NavigationManager

<PageTitle>Confirm Email</PageTitle>

<h1>Confirm Email</h1>
<StatusMessage Message="@statusMessage" />


@if (statusMessage == "Thank you for confirming your email.")
{
    <div>
        <p>Your email has been confirmed successfully!</p>
        <p>Now, let's set up your profile.</p>

        <!-- ✅ Make sure this NavLink dynamically links to the correct page -->
        <NavLink class="btn btn-primary" href="@GetProfileSetupUrl()">Set Up Your Profile</NavLink>
    </div>
}


@inject ILogger<ConfirmEmail> Logger  

@code {
    private string? statusMessage;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Role { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? RoleId { get; set; } // ✅ Ensure RoleId is retrieved

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("📌 DEBUG: Entered ConfirmEmail.razor");
        Logger.LogInformation($"🔍 Received - UserId: {UserId}, Role: {Role}, RoleId: {RoleId}, Code: {Code}, Email: {Email}");

        if (UserId is null || Code is null || Role is null || Email is null || RoleId is null)
        {
            Logger.LogError("❌ ERROR: Missing query parameters in ConfirmEmail. Redirecting to error page...");
            RedirectManager.RedirectTo("/error");
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            Logger.LogError($"❌ ERROR: No user found with ID {UserId}");
            statusMessage = $"Error loading user with ID {UserId}";
            return;
        }
        else
        {
            Logger.LogInformation("✅ User found. Attempting to confirm email...");

            try
            {
                var decodedCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
                Logger.LogInformation($"🔍 DEBUG: Decoded Token: {decodedCode}");

                var result = await UserManager.ConfirmEmailAsync(user, decodedCode);
                if (result.Succeeded)
                {
                    Logger.LogInformation("✅ Email confirmed successfully!");
                    statusMessage = "Thank you for confirming your email.";
                }
                else
                {
                    Logger.LogError("❌ ERROR: Email confirmation failed!");
                    statusMessage = "Error confirming your email.";
                    foreach (var error in result.Errors)
                    {
                        Logger.LogError($"❌ ERROR: {error.Description}");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"❌ ERROR: Exception occurred during email confirmation: {ex.Message}");
            }
        }
    }


    private string GetProfileSetupUrl()
    {
        string fixedRole = Role == "User" ? "Customer" : Role;

        return fixedRole switch
        {
            "Customer" => $"/customers/create?userId={UserId}&email={Email}&roleId={RoleId}",
            "Rider" => $"/riders/create?userId={UserId}&email={Email}&roleId={RoleId}",
            "BusinessOwner" => $"/businessowners/create?userId={UserId}&email={Email}&roleId={RoleId}",
            _ => "/error"
        };
    }


}



