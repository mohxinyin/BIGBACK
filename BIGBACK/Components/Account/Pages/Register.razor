@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BIGBACK.Data

@inject UserManager<BIGBACKUser> UserManager
@inject IUserStore<BIGBACKUser> UserStore
@inject SignInManager<BIGBACKUser> SignInManager
@inject IEmailSender<BIGBACKUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control"
                           autocomplete="firstname" aria-required="true" placeholder="Bill" />
                <label for="email">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control"
                           autocomplete="lastname" aria-required="true" placeholder="Gates" />
                <label for="email">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

			<label for="role">Select Your Role</label>
            <!-- Dropdown for User Role -->
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-select" aria-label="Select role">
                    <option value="Customer">Customer</option>
                    <option value="Rider">Rider</option>
                    <option value="BusinessOwner">Business Owner</option>
                </InputSelect>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
    
    private string GetRoleId(string roleName)
    {
        return roleName switch
        {
            "Customer" => "bd2bcf0c-20db-474f-8407-5a6b159518bb", // ✅ User (Customer)
            "Rider" => "dd2bcf0c-20db-474f-8407-5a6b159518bb",
            "BusinessOwner" => "cd2bcf0c-20db-474f-8407-5a6b159518ba",
            _ => "bd2bcf0c-20db-474f-8407-5a6b159518bb" // Default to User (Customer)
        };
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var userRole = Input.Role;
        var roleId = GetRoleId(userRole); // ✅ Correct method call

        // ✅ Convert "Customer" to "User" before storing
        if (userRole == "Customer")
        {
            userRole = "User";
        }

        if (!await RoleManager.RoleExistsAsync(userRole))
        {
            await RoleManager.CreateAsync(new IdentityRole { Id = roleId, Name = userRole, NormalizedName = userRole.ToUpper() });
        }

        await UserManager.AddToRoleAsync(user, userRole);

        // ✅ Store Role ID in Claims
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("roleId", roleId)); // ✅ Store Role ID

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new Dictionary<string, object?>
                {
                    ["email"] = Input.Email,
                    ["userId"] = userId,
                    ["role"] = userRole,
                    ["roleId"] = roleId // ✅ Send Role ID to confirmation page
                }
        );
    }






    private BIGBACKUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<BIGBACKUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(BIGBACKUser)}'. " +
                $"Ensure that '{nameof(BIGBACKUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<BIGBACKUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<BIGBACKUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        // Added Role property for dropdown
        [Required]
        public string Role { get; set; } = "Customer"; // Default role
    }
}
