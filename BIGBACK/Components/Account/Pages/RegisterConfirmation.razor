@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BIGBACK.Data

@inject UserManager<BIGBACKUser> UserManager
@inject IEmailSender<BIGBACKUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@inject ILogger<ConfirmEmail> Logger

<PageTitle>Register Confirmation</PageTitle>

<h1>Register Confirmation</h1>

<StatusMessage Message="@statusMessage" />

@if (emailConfirmationLink is not null)
{
    <p>
        This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
        Normally this would be emailed: <a href="@emailConfirmationLink">Click here to confirm your account</a>
    </p>
}
else
{
    <p>Please check your email to confirm your account.</p>
}

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // Explicitly retrieve UserId and Role from query string
    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Role { get; set; } // ✅ Ensure Role is retrieved

    // Explicitly retrieve RoleId from query string
    [SupplyParameterFromQuery]
    private string? RoleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null || UserId is null || Role is null || RoleId is null)
        {
            RedirectManager.RedirectTo("/error"); // ✅ Redirect if missing parameters
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            statusMessage = "Error: User not found.";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                 "Account/ConfirmEmail",
                 new Dictionary<string, object?>
                     {
                         ["userId"] = UserId,
                         ["role"] = Role,
                         ["roleId"] = RoleId, // ✅ Ensure RoleId is passed
                         ["code"] = code,
                         ["email"] = Email // ✅ Ensure email is passed
                     }
                 );

            Logger.LogInformation($"🔗 DEBUG: Confirmation Link Generated: {emailConfirmationLink}");
        }
    }

}
