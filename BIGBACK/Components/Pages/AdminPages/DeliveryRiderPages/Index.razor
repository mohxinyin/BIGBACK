@page "/deliveryriders"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BIGBACK.Domain
@using BIGBACK.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>DeliveryRider List</h1>

<p>
    <a href="deliveryriders/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.DeliveryRider">
    <PropertyColumn Property="deliveryrider => deliveryrider.DeliveryRiderTaskType" />
    <PropertyColumn Property="deliveryrider => deliveryrider.DeliveryRiderStatus" />
    @* <PropertyColumn Property="deliveryrider => deliveryrider.DeliveryId" />
    <PropertyColumn Property="deliveryrider => deliveryrider.RiderId" /> *@

    <PropertyColumn Property="deliveryRider => deliveryRider.Delivery.DeliveryStatus" Title="Delivery Status" />
    <PropertyColumn Property="deliveryRider => deliveryRider.Rider.RiderName" Title="Rider Name" />


    <TemplateColumn Context="deliveryrider">
        <a href="@($"deliveryriders/edit?id={deliveryrider.Id}")">Edit</a> |
        <a href="@($"deliveryriders/details?id={deliveryrider.Id}")">Details</a> |
        <a href="@($"deliveryriders/delete?id={deliveryrider.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private BIGBACKContext context = default!;
    private List<DeliveryRider> deliveryRiders = new();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        // Eagerly load related entities
        deliveryRiders = context.DeliveryRider
            .Include(dr => dr.Delivery) // Include Delivery to access DeliveryStatus
            .Include(dr => dr.Rider)   // Include Rider to access RiderName
            .ToList();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
