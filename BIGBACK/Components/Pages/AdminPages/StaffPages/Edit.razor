@page "/staff/edit"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Staff</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-lg">
                <div class="card-header bg-warning text-dark">
                    <h2 class="text-center m-0"><i class="fas fa-user-edit"></i> Edit Staff Member</h2>
                </div>
                <div class="card-body">
                    @if (Staff is null)
                    {
                        <p class="text-center text-danger"><em>Loading staff details...</em></p>
                    }
                    else
                    {
                        <EditForm method="post" Model="Staff" OnValidSubmit="UpdateStaff" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />

                            <!-- Hidden Input for Staff ID -->
                            <input type="hidden" name="Staff.Id" value="@Staff.Id" />

                            <!-- Staff Name -->
                            <div class="mb-3">
                                <label class="form-label">👤 Staff Name:</label>
                                <InputText @bind-Value="Staff.StaffName" class="form-control" placeholder="Enter full name" />
                                <ValidationMessage For="() => Staff.StaffName" class="text-danger" />
                            </div>

                            <!-- Staff Email -->
                            <div class="mb-3">
                                <label class="form-label">📧 Staff Email:</label>
                                <InputText @bind-Value="Staff.StaffEmail" class="form-control" placeholder="Enter email address" />
                                <ValidationMessage For="() => Staff.StaffEmail" class="text-danger" />
                            </div>

                            <!-- Staff Contact -->
                            <div class="mb-3">
                                <label class="form-label">📞 Staff Contact:</label>
                                <InputText @bind-Value="Staff.StaffContact" class="form-control" placeholder="Enter phone number" />
                                <ValidationMessage For="() => Staff.StaffContact" class="text-danger" />
                            </div>

                            <!-- Submit Button -->
                            <div class="d-flex justify-content-center">
                                <button type="submit" class="btn btn-warning btn-lg">
                                    <i class="fas fa-save"></i> Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
                <div class="card-footer text-center">
                    <a href="/staff" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Back to List</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Staff? Staff { get; set; }

    /// Loads the selected staff details for editing
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Staff ??= await context.Staff.FirstOrDefaultAsync(m => m.Id == Id);

        if (Staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    /// Saves the edited staff details
    private async Task UpdateStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Staff!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StaffExists(Staff!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/staff");
    }

    /// Checks if the staff exists in the database
    private bool StaffExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Staff.Any(e => e.Id == id);
    }
}
