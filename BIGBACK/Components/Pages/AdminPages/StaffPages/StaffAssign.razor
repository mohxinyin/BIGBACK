@page "/staff/staffassign"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>📋 Staff & Rider Assignment</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-primary">📋 Manage Staff & Riders</h1>
    </div>

    @if (Orders == null || !Orders.Any())
    {
        <div class="alert alert-warning text-center mt-4">
            <i class="fas fa-exclamation-circle"></i> No orders found.
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm p-3 bg-white rounded">
            <EditForm method="post" Model="Orders" OnValidSubmit="SaveAssignments" FormName="assign" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th>📦 Order ID</th>
                            <th>📌 Status</th>
                            <th>👤 Customer</th>
                            <th>🚲 Assign Rider</th>
                            <th>👔 Assign Staff</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Orders)
                        {
                            <tr>
                                <td class="fw-bold">#@order.Id</td>
                                <td>
                                    <span class="badge @(order.OrderStatus == "Completed" ? "bg-success" : order.OrderStatus == "Pending" ? "bg-warning text-dark" : "bg-secondary")">
                                        @order.OrderStatus
                                    </span>
                                </td>
                                <td>@order.Customer?.CustomerName</td>

                                <!-- Rider Dropdown -->
                                <td>
                                    <InputSelect id="riderid" @bind-Value="order.RiderId" class="form-control">
                                        <option value="0">🛵 Select Rider</option>
                                        @foreach (var rider in Riders)
                                        {
                                            <option value="@rider.Id">🏍️ @rider.RiderName</option>
                                        }
                                    </InputSelect>
                                </td>

                                <!-- Staff Dropdown -->
                                <td>
                                    <InputSelect id="staffid" @bind-Value="order.StaffId" class="form-control">
                                        <option value="0">👤 Select Staff</option>
                                        @foreach (var staff in StaffMembers)
                                        {
                                            <option value="@staff.Id">👔 @staff.StaffName</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Save Button -->
                <div class="d-flex justify-content-end mt-3">
                    <button type="submit" class="btn btn-success btn-lg">💾 Save Changes</button>
                </div>
            </EditForm>
        </div>
    }

    <!-- Back Button -->
    <div class="mt-3">
        <a href="/" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>
</div>

@code {
    private List<Order> Orders = new();
    private List<Rider> Riders = new();
    private List<Staff> StaffMembers = new();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Orders = await context.Order.Include(o => o.Customer).ToListAsync();
        Riders = await context.Rider.ToListAsync();
        StaffMembers = await context.Staff.ToListAsync();
    }

    private async Task SaveAssignments()
    {
        if (isSaving) return;
        isSaving = true;

        try
        {
            using var context = DbFactory.CreateDbContext();
            foreach (var order in Orders)
            {
                var existingOrder = await context.Order.FindAsync(order.Id);
                if (existingOrder != null)
                {
                    existingOrder.RiderId = order.RiderId; // ✅ Save selected RiderId
                    existingOrder.StaffId = order.StaffId; // ✅ Save selected StaffId
                    context.Update(existingOrder);
                }
            }

            await context.SaveChangesAsync();
            Console.WriteLine("✅ Assignments saved successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error saving assignments: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
}
