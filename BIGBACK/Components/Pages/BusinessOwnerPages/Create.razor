@page "/businessowners/create"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Create</PageTitle>

<h1 class="text-center mb-4">Create a New BusinessOwner</h1>
<hr />
<div class="row justify-content-center">
    <div class="col-md-4">
        <EditForm method="post" Model="BusinessOwner" OnValidSubmit="AddBusinessOwner" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="businessownername" class="form-label">Name:</label>
                <InputText id="businessownername" @bind-Value="BusinessOwner.BusinessOwnerName" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.BusinessOwnerName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="businessownerrcontact" class="form-label">Contact:</label>
                <InputText id="businessownerrcontact" @bind-Value="BusinessOwner.BusinessOwnerrContact" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.BusinessOwnerrContact" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="businessowneremail" class="form-label">Email:</label>
                <InputText id="businessowneremail" @bind-Value="BusinessOwner.BusinessOwnerEmail" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.BusinessOwnerEmail" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="businessownergender" class="form-label">Gender:</label>
                <InputSelect id="businessstatus" @bind-Value="BusinessOwner.BusinessOwnerGender" class="form-control">
                    <option value="Female">Female</option>
                    <option value="Male">Male</option>
                </InputSelect>
                <ValidationMessage For="() => BusinessOwner.BusinessOwnerGender" class="text-danger" />
            </div>

            @*  CreatedBy,UpdatedBy,DateCreated,DateUpdated fields  *@
            <div class="mb-3" style="display:none;">
                <label for="createdby" class="form-label">CreatedBy:</label>
                <InputText id="createdby" @bind-Value="BusinessOwner.CreatedBy" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.CreatedBy" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="updatedby" class="form-label">UpdatedBy:</label>
                <InputText id="updatedby" @bind-Value="BusinessOwner.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.UpdatedBy" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="datecreated" class="form-label">DateCreated:</label>
                <InputDate id="datecreated" @bind-Value="BusinessOwner.DateCreated" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.DateCreated" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="dateupdated" class="form-label">DateUpdated:</label>
                <InputDate id="dateupdated" @bind-Value="BusinessOwner.DateUpdated" class="form-control" />
                <ValidationMessage For="() => BusinessOwner.DateUpdated" class="text-danger" />
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </EditForm>
    </div>
</div>

<div class="mt-3 text-center">
    <a href="businessowners/details">Back</a>
</div>

@code {
    //Create userId string to store the user id, default value is "System".
    private string userId = "System";
    [SupplyParameterFromForm]
    private BusinessOwner BusinessOwner { get; set; } = new();

    //Override the OnInitialized method to get the user id.
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBusinessOwner()
    {
        await using var context = DbFactory.CreateDbContext();

        //Set the userId to the CreatedBy and UpdatedBy fields.
        BusinessOwner.CreatedBy = userId;
        BusinessOwner.UpdatedBy = userId;

        //Set the DateCreated and DateUpdated fields to the current date and time.
        BusinessOwner.DateCreated = DateTime.Now;
        BusinessOwner.DateUpdated = DateTime.Now;

        context.BusinessOwner.Add(BusinessOwner);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/businessowners/details");

    }
}