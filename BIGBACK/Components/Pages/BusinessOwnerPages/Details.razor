@page "/businessowners/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@inject IDbContextFactory<BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;

<PageTitle>Details</PageTitle>

<div>
    <h1>Account Details</h1>
    <hr />
    <h3>BusinessOwner</h3>
    @if (businessowners is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!businessowners.Any())
    {
        <p>No business owners found.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Contact</th>
                    <th>Email</th>
                    <th>Gender</th>
                    <th>Date Created</th>
                    <th>Date Updated</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var owner in businessowners)
                {
                    <tr>
                        <td>@owner.BusinessOwnerName</td>
                        <td>@owner.BusinessOwnerrContact</td>
                        <td>@owner.BusinessOwnerEmail</td>
                        <td>@owner.BusinessOwnerGender</td>
                        <td>@owner.DateCreated</td>
                        <td>@owner.DateUpdated</td>
                        <td>
                            <a href="@($"/businessowners/edit?id={owner.Id}")">Edit</a> |
                            <a href="@($"/businessowners/delete?id={owner.Id}")">Delete</a>

                        </td>
                    </tr>
                }

            </tbody>
        </table>
        <div>
            <a href="businessowners/create">Create New</a>
        </div>


    }
</div>

@code {
    private List<BusinessOwner>? businessowners;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Only apply the filter if we're not on the "create" page
            if (userId is not null && !NavigationManager.Uri.Contains("/businessowners/create"))
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                businessowners = await context.BusinessOwner
                    .Where(b => b.CreatedBy == userId)
                    .OrderByDescending(b => b.DateCreated)
                    .ToListAsync();
            }
        }
    }
}