@page "/businesses/create"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;

<PageTitle>Create a New Business</PageTitle>

<h1 class="text-center mb-4">Create Your Restaurant</h1>
<hr />

<div class="row justify-content-center">
    <div class="col-md-8">
        <EditForm Method="post" Model="Business" OnValidSubmit="AddBusiness" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Business Name -->
            <div class="mb-3">
                <label for="businessname" class="form-label">Business Name:</label>
                <InputText id="businessname" @bind-Value="Business.BusinessName" class="form-control" placeholder="Enter your business name" />
                <ValidationMessage For="() => Business.BusinessName" class="text-danger" />
            </div>

            <!-- Business Address -->
            <div class="mb-3">
                <label for="businessaddress" class="form-label">Business Address:</label>
                <InputText id="businessaddress" @bind-Value="Business.BusinessAddress" class="form-control" placeholder="Enter your business address" />
                <ValidationMessage For="() => Business.BusinessAddress" class="text-danger" />
            </div>

            <!-- Business Contact -->
            <div class="mb-3">
                <label for="businesscontact" class="form-label">Business Contact:</label>
                <InputText id="businesscontact" @bind-Value="Business.BusinessContact" class="form-control" placeholder="Enter your contact number" />
                <ValidationMessage For="() => Business.BusinessContact" class="text-danger" />
            </div>

            <!-- Remove Business Rating Field from the Form (hidden from the owner) -->
            <div class="mb-3" style="display:none;">
                <label for="businessrating" class="form-label">Business Rating:</label>
                <InputText id="businessrating" @bind-Value="Business.BusinessRating" class="form-control" readonly />
                <ValidationMessage For="() => Business.BusinessRating" class="text-danger" />
            </div>

            <!-- Business Status -->
            <div class="mb-3">
                <label for="businessstatus" class="form-label">Business Status:</label>
                <InputSelect id="businessstatus" @bind-Value="Business.BusinessStatus" class="form-control" >
                    <option value="Open">Open</option>
                    <option value="Closed">Closed</option>
                </InputSelect>
                <ValidationMessage For="() => Business.BusinessStatus" class="text-danger" />
            </div>

            <!-- Remove Business Owner ID Field (it will be assigned automatically) -->
            <div class="mb-3" style="display:none;">
                <label for="businessownerid" class="form-label">Business Owner ID:</label>
                <InputNumber id="businessownerid" @bind-Value="Business.BusinessOwnerId" class="form-control" readonly />
                <ValidationMessage For="() => Business.BusinessOwnerId" class="text-danger" />
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-success btn-lg">Create Business</button>
            </div>
        </EditForm>
    </div>
</div>


<div class="mt-3 text-center">
    <a href="/businesses/details" class="btn btn-link">Back</a>
</div>


@code {
    [SupplyParameterFromForm]
    private Business Business { get; set; } = new();
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Redirect if the user is not authenticated
            if (string.IsNullOrEmpty(userId))
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBusiness()
    {
        if (!string.IsNullOrEmpty(userId))
        {
            await using var context = await DbFactory.CreateDbContextAsync();

            // Get BusinessOwner for the logged-in user
            var businessOwner = await context.BusinessOwner
                .FirstOrDefaultAsync(b => b.CreatedBy == userId);

            if (businessOwner is null)
            {
                NavigationManager.NavigateTo("notfound");
            }

            // Assign BusinessOwnerId before saving
            Business.BusinessOwnerId = businessOwner.Id;

            // Add the new Business to the context
            context.Business.Add(Business);
            await context.SaveChangesAsync();

            // Redirect to the businesses list page after successful creation
            NavigationManager.NavigateTo("/businesses/details");
        
        }


    }
}

