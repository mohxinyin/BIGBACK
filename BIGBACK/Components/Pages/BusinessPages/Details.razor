@page "/businesses/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Business</h2>
    <hr />
    @if (business is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">BusinessName</dt>
            <dd class="col-sm-10">@business.BusinessName</dd>
            <dt class="col-sm-2">BusinessAddress</dt>
            <dd class="col-sm-10">@business.BusinessAddress</dd>
            <dt class="col-sm-2">BusinessContact</dt>
            <dd class="col-sm-10">@business.BusinessContact</dd>
            <dt class="col-sm-2">BusinessRating</dt>
            <dd class="col-sm-10">@business.BusinessRating</dd>
            <dt class="col-sm-2">BusinessStatus</dt>
            <dd class="col-sm-10">@business.BusinessStatus</dd>
            @* <dt class="col-sm-2">BusinessOwnerId</dt> *@
            @* <dd class="col-sm-10">@business.BusinessOwnerId</dd>  *@
        </dl>
        <div>
            <AuthorizeView Roles="Administrator,BusinessOwner">
				<a href="@($"/businesses/edit?id={business.Id}")">Edit</a> |
            </AuthorizeView>
            
            <a href="@($"/businesses")">Back to List</a>
        </div>
    }
</div>

@code {
    private Business? business;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        business = await context.Business.FirstOrDefaultAsync(m => m.Id == Id);

        if (business is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
