@page "/businesses/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@inject IDbContextFactory<BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @implements IAsyncDisposable *@
@using System.Security.Claims;

<PageTitle>Details</PageTitle>


<div>
    <h1>Your Businesses</h1>
    <hr />

    @if (businesses is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (businesses.Count == 0)
    {
        <p>No businesses found for the current user.</p>
    }
    else
    {
        <div class="row">
            @foreach (var business in businesses)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Name: @business.BusinessName</h5>
                            <p class="card-text">Address: @business.BusinessAddress</p>
                            <p class="card-text">Contact: @business.BusinessContact</p>
                            <p class="card-text">Rating: @business.BusinessRating</p>
                            <p class="card-text">Status: @business.BusinessStatus</p>
                            <div class="text-center">
                                <a href="@($"/businesses/edit?id={business.Id}")" class="btn btn-primary">Edit</a>
                                <a href="@($"/businesses/delete?id={business.Id}")" class="btn btn-primary">Delete</a> 
                                <a href="@($"/menus/details?businessId={business.Id}")" class="btn btn-primary">View Menu</a>
                                <a href="@($"/orders/{business.Id}")" class="btn btn-primary">View Orders</a>

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <a href="businesses/create">Create a New Business </a>
    }
</div>

@code {
    private List<Business>? businesses;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId) && !NavigationManager.Uri.Contains("/businesses/create"))
            {
                await using var context = await DbFactory.CreateDbContextAsync();

                // Get BusinessOwner for the logged-in user
                var businessOwner = await context.BusinessOwner
                    .FirstOrDefaultAsync(b => b.CreatedBy == userId);

                if (businessOwner is not null)
                {
                    // Get the business linked to the BusinessOwner
                    businesses = await context.Business
                        .Where(m => m.BusinessOwnerId == businessOwner.Id)
                        .ToListAsync();
                }
            }
        }

        // Redirect if no business is found
        if (businesses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
