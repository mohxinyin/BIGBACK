@page "/deliveries/edit"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>✏️ Edit Delivery 📦</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-warning">✏️ Edit Delivery 🚚</h1>
        <a class="btn btn-secondary" href="/deliveries">⬅ 🔙 Back to List</a>
    </div>

    @if (Delivery is null)
    {
        <p class="text-center fs-4">⏳ <em>Loading... Please wait</em> ⏳</p>
    }
    else
    {
        <div class="card shadow-lg p-4 border-info">
            <EditForm method="post" Model="Delivery" OnValidSubmit="UpdateDelivery" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger fw-bold" role="alert" />

                <input type="hidden" name="Delivery.Id" value="@Delivery.Id" />

                <div class="mb-3">
                    <label for="deliverytime" class="form-label">⏰ Delivery Time:</label>
                    <InputDate id="deliverytime" @bind-Value="Delivery.DeliveryTime" class="form-control border-success" />
                    <ValidationMessage For="() => Delivery.DeliveryTime" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="deliverydate" class="form-label">📅 Delivery Date:</label>
                    <InputDate id="deliverydate" @bind-Value="Delivery.DeliveryDate" class="form-control border-success" />
                    <ValidationMessage For="() => Delivery.DeliveryDate" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="customername" class="form-label">👤 Customer:</label>
                    <InputSelect id="customername" @bind-Value="Delivery.CustomerID" class="form-control border-primary">
                        <option value="">👥 Select Customer</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">👤 @customer.CustomerName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Delivery.CustomerID" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="orderid" class="form-label">📦 Order:</label>
                    <InputSelect id="orderid" @bind-Value="Delivery.OrderID" class="form-control border-primary">
                        <option value="">📜 Select Order</option>
                        @foreach (var order in Orders)
                        {
                            <option value="@order.Id">📦 Order #@order.Id</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Delivery.OrderID" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="businessid" class="form-label">🏢 Business:</label>
                    <InputSelect id="businessid" @bind-Value="Delivery.BusinessID" class="form-control border-primary">
                        <option value="">🏬 Select Business</option>
                        @foreach (var business in Businesses)
                        {
                            <option value="@business.Id">🏢 @business.BusinessName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Delivery.BusinessID" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="deliveryfee" class="form-label">💰 Delivery Fee:</label>
                    <InputNumber id="deliveryfee" @bind-Value="Delivery.DeliveryFee" class="form-control border-warning" />
                    <ValidationMessage For="() => Delivery.DeliveryFee" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="deliverystatus" class="form-label">🚦 Delivery Status:</label>
                    <InputText id="deliverystatus" @bind-Value="Delivery.DeliveryStatus" class="form-control border-warning" />
                    <ValidationMessage For="() => Delivery.DeliveryStatus" class="text-danger fw-bold" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary btn-lg">💾 Save Changes</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Delivery? Delivery { get; set; }
    private List<Customer> Customers = new();
    private List<Order> Orders = new();
    private List<Business> Businesses = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Delivery ??= await context.Delivery.FirstOrDefaultAsync(m => m.Id == Id);

        if (Delivery is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Customers = await context.Customer.ToListAsync();
            Orders = await context.Order.ToListAsync();
            Businesses = await context.Business.ToListAsync();
        }
    }

    private async Task UpdateDelivery()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Delivery!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DeliveryExists(Delivery!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/deliveries");
    }

    private bool DeliveryExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Delivery.Any(e => e.Id == id);
    }
}
