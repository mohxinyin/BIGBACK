@page "/deliveryriders/create"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>🚀 Create Delivery Rider 🚀</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-success">🏍️ Create a New Delivery Rider 📦</h1>
        <a class="btn btn-secondary" href="/deliveryriders">⬅ 🔙 Back to List</a>
    </div>

    <div class="card shadow-lg p-4 border-info">
        <EditForm method="post" Model="DeliveryRider" OnValidSubmit="AddDeliveryRider" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger fw-bold" role="alert" />

            <div class="mb-3">
                <label for="deliveryridertasktype" class="form-label">📝 Task Type:</label>
                <InputText id="deliveryridertasktype" @bind-Value="DeliveryRider.DeliveryRiderTaskType" class="form-control border-success" />
                <ValidationMessage For="() => DeliveryRider.DeliveryRiderTaskType" class="text-danger fw-bold" />
            </div>
            <div class="mb-3">
                <label for="deliveryriderstatus" class="form-label">📌 Status:</label>
                <InputText id="deliveryriderstatus" @bind-Value="DeliveryRider.DeliveryRiderStatus" class="form-control border-success" />
                <ValidationMessage For="() => DeliveryRider.DeliveryRiderStatus" class="text-danger fw-bold" />
            </div>
            <div class="mb-3">
                <label for="deliveryname" class="form-label">📦 Delivery:</label>
                <InputSelect id="deliveryname" @bind-Value="DeliveryRider.DeliveryId" class="form-control border-primary">
                    <option value="">🚛 Select Delivery</option>
                    @foreach (var delivery in Deliveries)
                    {
                        <option value="@delivery.Id">📦 Order @delivery.OrderID</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => DeliveryRider.DeliveryId" class="text-danger fw-bold" />
            </div>
            <div class="mb-3">
                <label for="ridername" class="form-label">🏍️ Rider:</label>
                <InputSelect id="ridername" @bind-Value="DeliveryRider.RiderId" class="form-control border-primary">
                    <option value="">🧑‍✈️ Select Rider</option>
                    @foreach (var rider in Riders)
                    {
                        <option value="@rider.Id">🏍️ @rider.RiderName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => DeliveryRider.RiderId" class="text-danger fw-bold" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary btn-lg">🚀 Create Rider!</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private DeliveryRider DeliveryRider { get; set; } = new();
    private List<Rider> Riders = new();
    private List<Delivery> Deliveries = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Riders = await context.Rider.ToListAsync();
        Deliveries = await context.Delivery.ToListAsync();
    }

    private async Task AddDeliveryRider()
    {
        using var context = DbFactory.CreateDbContext();
        context.DeliveryRider.Add(DeliveryRider);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/deliveryriders");
    }
}
