@page "/deliveryriders/delete"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>🗑️ Delete Delivery Rider 🗑️</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-danger">⚠️ Delete Delivery Rider 🏍️</h1>
        <a class="btn btn-secondary" href="/deliveryriders">⬅ 🔙 Back to List</a>
    </div>

    <p class="fs-4 text-center text-warning">⚠️ Are you sure you want to delete this? This action cannot be undone! ⚠️</p>

    @if (deliveryrider is null)
    {
        <p class="text-center fs-4">⏳ <em>Loading details... Please wait</em> ⏳</p>
    }
    else
    {
        <div class="card shadow-lg p-4 border-danger">
            <dl class="row">
                <dt class="col-sm-3">📝 Task Type:</dt>
                <dd class="col-sm-9">✨ @deliveryrider.DeliveryRiderTaskType</dd>

                <dt class="col-sm-3">📌 Status:</dt>
                <dd class="col-sm-9">✅ @deliveryrider.DeliveryRiderStatus</dd>

                <dt class="col-sm-3">📦 Delivery:</dt>
                <dd class="col-sm-9">🚛 @deliveryrider.DeliveryId</dd>

                <dt class="col-sm-3">🏍️ Rider:</dt>
                <dd class="col-sm-9">🧑‍✈️ @deliveryrider.Rider.RiderName</dd>
            </dl>
        </div>
        <div class="mt-3 d-flex justify-content-center">
            <EditForm method="post" Model="deliveryrider" OnValidSubmit="DeleteDeliveryRider" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger btn-lg">🗑️ Yes, Delete!</button>
                <a class="btn btn-secondary ms-3" href="/deliveryriders">❌ Cancel</a>
            </EditForm>
        </div>
    }
</div>

@code {
    private DeliveryRider? deliveryrider;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        deliveryrider = await context.DeliveryRider
            .Include(d => d.Delivery)
            .Include(d => d.Rider)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (deliveryrider is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDeliveryRider()
    {
        using var context = DbFactory.CreateDbContext();
        context.DeliveryRider.Remove(deliveryrider!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/deliveryriders");
    }
}
