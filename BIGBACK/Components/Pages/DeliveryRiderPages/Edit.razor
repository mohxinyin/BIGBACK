@page "/deliveryriders/edit"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>✨ Edit Delivery Rider ✨</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-primary">🏍️ Edit Delivery Rider 🏍️</h1>
        <a class="btn btn-secondary" href="/deliveryriders">⬅ 🔙 Back to List</a>
    </div>

    @if (DeliveryRider is null)
    {
        <p class="text-center fs-4">⏳ <em>Loading... Please wait</em> ⏳</p>
    }
    else
    {
        <div class="card shadow-lg p-4 border-primary">
            <EditForm method="post" Model="DeliveryRider" OnValidSubmit="UpdateDeliveryRider" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger fw-bold" role="alert" />

                <input type="hidden" name="DeliveryRider.Id" value="@DeliveryRider.Id" />

                <div class="mb-3">
                    <label for="deliveryridertasktype" class="form-label">📝 Task Type:</label>
                    <InputText id="deliveryridertasktype" @bind-Value="DeliveryRider.DeliveryRiderTaskType" class="form-control border-info" />
                    <ValidationMessage For="() => DeliveryRider.DeliveryRiderTaskType" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="deliveryriderstatus" class="form-label">📌 Status:</label>
                    <InputText id="deliveryriderstatus" @bind-Value="DeliveryRider.DeliveryRiderStatus" class="form-control border-info" />
                    <ValidationMessage For="() => DeliveryRider.DeliveryRiderStatus" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="deliveryname" class="form-label">📦 Delivery:</label>
                    <InputSelect id="deliveryname" @bind-Value="DeliveryRider.DeliveryId" class="form-control border-success">
                        <option value="">🚛 Select Delivery</option>
                        @foreach (var delivery in Deliveries)
                        {
                            <option value="@delivery.Id">📦 @delivery.CustomerID</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => DeliveryRider.DeliveryId" class="text-danger fw-bold" />
                </div>
                <div class="mb-3">
                    <label for="ridername" class="form-label">🏍️ Rider:</label>
                    <InputSelect id="ridername" @bind-Value="DeliveryRider.RiderId" class="form-control border-warning">
                        <option value="">🧑‍✈️ Select Rider</option>
                        @foreach (var rider in Riders)
                        {
                            <option value="@rider.Id">🏍️ @rider.RiderName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => DeliveryRider.RiderId" class="text-danger fw-bold" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-success btn-lg">💾 Save Changes</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private DeliveryRider? DeliveryRider { get; set; }
    private List<Rider> Riders = new();
    private List<Delivery> Deliveries = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DeliveryRider ??= await context.DeliveryRider.FirstOrDefaultAsync(m => m.Id == Id);

        if (DeliveryRider is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Riders = await context.Rider.ToListAsync();
            Deliveries = await context.Delivery.ToListAsync();
        }
    }

    private async Task UpdateDeliveryRider()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(DeliveryRider!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DeliveryRiderExists(DeliveryRider!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/deliveryriders");
    }

    private bool DeliveryRiderExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.DeliveryRider.Any(e => e.Id == id);
    }
}
