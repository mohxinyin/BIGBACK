@page "/menuitems/create"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;

<PageTitle>Create</PageTitle>

<h2>Add MenuItems</h2>
<hr />
<div class="row justify-content-center">
    <div class="col-md-4">
        <EditForm method="post" Model="MenuItem" OnValidSubmit="AddMenuItem" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="menuitemprice" class="form-label">MenuItemPrice:</label> 
                <InputNumber id="menuitemprice" @bind-Value="MenuItem.MenuItemPrice" class="form-control" /> 
                <ValidationMessage For="() => MenuItem.MenuItemPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="menuitemname" class="form-label">MenuItemName:</label> 
                <InputText id="menuitemname" @bind-Value="MenuItem.MenuItemName" class="form-control" /> 
                <ValidationMessage For="() => MenuItem.MenuItemName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="menuitemdesc" class="form-label">MenuItemDesc:</label> 
                <InputText id="menuitemdesc" @bind-Value="MenuItem.MenuItemDesc" class="form-control" /> 
                <ValidationMessage For="() => MenuItem.MenuItemDesc" class="text-danger" /> 
            </div>        
            <div class="mb-3" style="display:none;">
                <label for="menuid" class="form-label">MenuId:</label> 
                <InputNumber id="menuid" @bind-Value="MenuItem.MenuId" class="form-control" /> 
                <ValidationMessage For="() => MenuItem.MenuId" class="text-danger" /> 
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </EditForm>
    </div>
</div>

<div class="mt-3 text-center">
    @if (menu is not null)
    {
        <a href="@($"/menuitems/details?menuId={MenuItem.MenuId}&businessId={menu.BusinessId}")">Back</a>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private MenuItem MenuItem { get; set; } = new();
    private string? userId;
    private Menu? menu;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("menuId", out var menuIdValue) && !string.IsNullOrEmpty(menuIdValue))
        {
            MenuItem.MenuId = int.Parse(menuIdValue);

            await using var context = await DbFactory.CreateDbContextAsync();
            menu = await context.Menu.FirstOrDefaultAsync(m => m.Id == MenuItem.MenuId);

        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task AddMenuItem()
    {
        if (MenuItem.MenuId > 0)
        {
            await using var context = await DbFactory.CreateDbContextAsync();

            // Ensure the MenuItem is being added to an existing menu
            var existingmenu = await context.Menu.FirstOrDefaultAsync(m => m.Id == MenuItem.MenuId);

            if (existingmenu != null)
                {
                    // The MenuItem can be added as the MenuId is valid
                    context.MenuItem.Add(MenuItem);
                    await context.SaveChangesAsync();

                NavigationManager.NavigateTo($"/menuitems/details?menuId={existingmenu.Id}&businessId={existingmenu.BusinessId}");
                }
                else
                {
                    // If the MenuId does not exist, navigate to the "notfound" page
                    NavigationManager.NavigateTo("notfound");
                }
            }
        }
    }
