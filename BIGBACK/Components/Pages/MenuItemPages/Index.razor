@page "/menuitems/{menuId:int}"  
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BIGBACK.Domain
@using BIGBACK.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory

<PageTitle>Menu Item List</PageTitle>

<h1>Menu Items for @menu?.MenuName</h1>

<p>
    <AuthorizeView Roles="Administrator,BusinessOwner">
        <a href="menuitems/create" class="btn btn-primary">Create New MenuItem</a>
    </AuthorizeView>
</p>

<QuickGrid Class="table" Items="menuItems.AsQueryable()">
    <PropertyColumn Property="item => item.MenuItemName" Title="Item Name" />
    <PropertyColumn Property="item => item.MenuItemDesc" Title="Description" />
    <PropertyColumn Property="item => item.MenuItemPrice" Title="Price" />
    <PropertyColumn Property="item => item.Menu.MenuName" Title="Menu Name" />

    <TemplateColumn Context="menuitem">
        <a href="@($"menuitems/details?id={menuitem.Id}")">Details</a> |
        <AuthorizeView Roles="Administrator,BusinessOwner">
            <a href="@($"menuitems/edit?id={menuitem.Id}")">Edit</a> |
            <a href="@($"menuitems/delete?id={menuitem.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    [Parameter] public int menuId { get; set; }
    private List<MenuItem> menuItems = new();
    private Menu? menu;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        // Load the menu to display its name
        menu = await context.Menu
            .FirstOrDefaultAsync(m => m.Id == menuId);

        // If the menu is found, load its items
        if (menu != null)
        {
            menuItems = await context.MenuItem
                .Where(m => m.MenuId == menuId)  // Filter by MenuId
                .ToListAsync();
        }
    }

    public async ValueTask DisposeAsync() => await Task.CompletedTask;
}
