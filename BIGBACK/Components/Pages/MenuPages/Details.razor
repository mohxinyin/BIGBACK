@page "/menus/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@inject IDbContextFactory<BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;

<PageTitle>Details</PageTitle>


<div>
    <h1>Your Menus</h1>
    <hr />
    @if (menus is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var menu in menus)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Name: @menu.MenuName</h5>
                            <p class="card-text">Category: @menu.MenuCategory</p>
                            <p class="card-text">BusinessId: @menu.BusinessId</p>
                            <div class="text-center">
                                <a href="@($"/menus/edit?id={menu.Id}")" class="btn btn-primary">Edit</a> 
                                <a href="@($"/menus/delete?id={menu.Id}")" class="btn btn-danger">Delete</a> 
                                <a href="@($"/menuitems/details?menuId={menu.Id}&businessId={menu.BusinessId}")" class="btn btn-success">View Items</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div> 
            <a href="/menus/create?businessId=@businessId">Create a New Menu</a> |
            <a href="/businesses/details">Back</a>
        </div>
    }
</div>

@code {
    private List<Menu>? menus;
    private int businessId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the businessId from query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Ensure businessId is in the query
        if (!queryParams.TryGetValue("businessId", out var businessIdValue) || string.IsNullOrEmpty(businessIdValue))
        {
            NavigationManager.NavigateTo("notfound");  // Redirect to not found if businessId is missing
            return;
        }

        // Parse businessId from the query string
        businessId = int.Parse(businessIdValue);
        // businessId = int.Parse(queryParams["businessId"]);

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await using var context = await DbFactory.CreateDbContextAsync();

                // Get BusinessOwner for the logged-in user
                var businessOwner = await context.BusinessOwner
                    .FirstOrDefaultAsync(b => b.CreatedBy == userId);

                if (businessOwner is not null)
                {
                    // Get the business linked to the BusinessOwner
                    var business = await context.Business
                        .FirstOrDefaultAsync(m => m.BusinessOwnerId == businessOwner.Id);

                    if (business is not null)
                    {
                        // Get the menu linked to the BusinessId
                        menus = await context.Menu
                        .Where(m => m.BusinessId == businessId)
                        .ToListAsync();
                    }
                }
            }
        }

        // Redirect if no menu is found
        if (menus is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

