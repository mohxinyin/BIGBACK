@page "/menus/edit"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1 class="text-center mb-4">Edit Menu</h1>
<hr />
@if (Menu is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-4">
            <EditForm method="post" Model="Menu" OnValidSubmit="UpdateMenu" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Menu.Id" value="@Menu.Id" />
                <div class="mb-3">
                    <label for="menuname" class="form-label">MenuName:</label>
                    <InputText id="menuname" @bind-Value="Menu.MenuName" class="form-control" />
                    <ValidationMessage For="() => Menu.MenuName" class="text-danger" />
                </div>
                <div class="mb-3"style="display:none;">
                    <label for="businessid" class="form-label">BusinessId:</label>
                    <InputNumber id="businessid" @bind-Value="Menu.BusinessId" class="form-control" />
                    <ValidationMessage For="() => Menu.BusinessId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="menucategory" class="form-label">MenuCategory:</label>
                    <InputText id="menucategory" @bind-Value="Menu.MenuCategory" class="form-control" />
                    <ValidationMessage For="() => Menu.MenuCategory" class="text-danger" />
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
                </EditForm>
        </div>
    </div>
}

<div class="mt-3 text-center">
    @if (Menu is not null)
    {
        <a href="@($"/menus/details?id={Menu.Id}&businessId={Menu.BusinessId}")">Back</a>
    }

</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromQuery]
    private int BusinessId { get; set; } // Add this to receive the businessId from the query string

    [SupplyParameterFromForm]
    private Menu? Menu { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Menu ??= await context.Menu.FirstOrDefaultAsync(m => m.Id == Id);

        if (Menu is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMenu()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Menu!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MenuExists(Menu!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/menus/details?id={Menu.Id}&businessId={Menu.BusinessId}"); 
    }

    private bool MenuExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Menu.Any(e => e.Id == id);
    }
}
