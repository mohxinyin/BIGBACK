@page "/menus/{businessId:int?}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using BIGBACK.Domain
@using BIGBACK.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory

<PageTitle>Menu List</PageTitle>

<h1>@(businessId.HasValue ? $"Menu for {business?.BusinessName}" : "All Menus")</h1>

@if (businessId.HasValue)
{
    <p>
        <AuthorizeView Roles="Administrator,BusinessOwner">
            <a href="menus/create" class="btn btn-primary">Create New Menu</a>
        </AuthorizeView>
    </p>
}

@if (menus != null && menus.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var menu in menus)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@menu.MenuName</h5>
                            <p class="card-text"><strong>Category:</strong> @menu.MenuCategory</p>
                            <p class="card-text"><strong>Business:</strong> @menu.Business.BusinessName</p>
                            <p class="card-text"><strong>Rating:</strong> @menu.Business.BusinessRating</p>

                            <div class="d-flex justify-content-between">
                                <a href="@($"menus/details?id={menu.Id}")" class="btn btn-info btn-sm">Details</a>

                                <AuthorizeView Roles="Administrator,BusinessOwner">
                                    <a href="@($"menus/edit?id={menu.Id}")" class="btn btn-warning btn-sm">Edit</a> |
                                    <a href="@($"menus/delete?id={menu.Id}")" class="btn btn-danger btn-sm">Delete</a>
                                </AuthorizeView>
                            </div>

                            <!-- NEW: View Menu Items Button -->
                            <div class="mt-2">
                                <a href="@($"/menuitems/{menu.Id}")" class="btn btn-success btn-sm">
                                    View Menu Items
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>No menus available for this business.</p>
}

@code {
    [Parameter] public int? businessId { get; set; }
      <!-- Make businessId nullable -->
    private Business? business;
    private List<Menu>? menus = new();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        if (businessId.HasValue)
        {
            // Fetch the business using businessId
            business = await context.Business
                .FirstOrDefaultAsync(b => b.Id == businessId);

            // If the business is found, load its menus
            if (business != null)
            {
                menus = await context.Menu
                    .Where(m => m.BusinessId == businessId)  // Filter menus by the businessId
                    .Include(m => m.Business)  // Eagerly load the related Business entity
                    .ToListAsync();
            }
        }
        else
        {
            // If no businessId is provided, fetch all menus
            menus = await context.Menu
                .Include(m => m.Business)  // Eagerly load the related Business entity
                .ToListAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Task.CompletedTask;
    }
}
