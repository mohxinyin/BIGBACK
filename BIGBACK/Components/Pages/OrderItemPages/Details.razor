@page "/orderitems/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>OrderItem</h2>
    <hr />
    @if (orderitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrderItemQty</dt>
            <dd class="col-sm-10">@orderitem.OrderItemQty</dd>
            <dt class="col-sm-2">OrderItemPromo</dt>
            <dd class="col-sm-10">@orderitem.OrderItemPromo</dd>
            @* <dt class="col-sm-2">OrderId</dt>
            <dd class="col-sm-10">@orderitem.OrderId</dd>
            <dt class="col-sm-2">MenuItemId</dt>
            <dd class="col-sm-10">@orderitem.MenuItemId</dd> *@
        </dl>
        <div>
 
            <a href="@($"/orderitems")"class="btn btn-primary">Back to List</a>
        </div>
    }
</div>

@code {
    private OrderItem? orderitem;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        orderitem = await context.OrderItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (orderitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
