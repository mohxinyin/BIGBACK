@page "/customer/orders"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<BIGBACKContext> DbFactory
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@implements IAsyncDisposable

<h2>My Orders</h2>

@if (orders.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Date</th>
                <th>Status</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.OrderDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@order.OrderStatus</td>
                    <td>$@order.OrderTotal</td>
                    <td>
                        <NavLink class="btn btn-primary btn-sm" href="@($"/customer/order/{order.Id}")">View Details</NavLink>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-danger">No orders found.</p>
}

@code {
    private List<Order> orders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userEmail = user.Identity.Name;

            // Fetch Customer's Orders
            await using var context = await DbFactory.CreateDbContextAsync();
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.CustomerEmail == userEmail);

            if (customer is not null)
            {
                orders = await context.Order
                    .Where(o => o.CustomerId == customer.Id)
                    .OrderByDescending(o => o.OrderDateTime)
                    .ToListAsync();
            }
            else
            {
                orders = new List<Order>(); // Prevents null reference errors
            }

        }
    }

    public async ValueTask DisposeAsync()
    {
        await Task.CompletedTask;
    }
}
