@page "/customer/payments"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<BIGBACKContext> DbFactory
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@using BIGBACK.Data
@implements IAsyncDisposable
@using System.Security.Claims;

<h2>Payment History</h2>

@if (payments.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Payment ID</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Method</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in payments)
            {
                <tr>
                    <td>@payment.Id</td>
                    <td>@payment.PaymentDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>$@payment.PaymentAmount</td>
                    <td>@payment.PaymentMethod</td>
                    <td>@payment.PaymentStatus</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-danger">No payments found.</p>
    <NavLink class="btn btn-warning" href="@($"/businesses")">Start Ordering Now!</NavLink>
}

@code {
    private List<Payment> payments = new List<Payment>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value; // Get the UserId from claims

            if (userId is not null)
            {
                // Fetch Customer by matching the CreatedBy field with the logged-in user's UserId
                await using var context = await DbFactory.CreateDbContextAsync();
                var customer = await context.Customer.FirstOrDefaultAsync(c => c.CreatedBy == userId);

                if (customer is not null)
                {
                    // Fetch all OrderIds belonging to this customer
                    var orderIds = await context.Order
                        .Where(o => o.CustomerId == customer.Id)
                        .Select(o => o.Id)
                        .ToListAsync(); // Get list of Order IDs

                    // Fetch payments that are linked to those orders
                    payments = await context.Payment
                        .Where(p => orderIds.Contains(p.OrderId)) // Filter payments using OrderId
                        .Include(p => p.Order) // Ensure Order is included
                        .OrderByDescending(p => p.PaymentDateTime)
                        .ToListAsync();
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Task.CompletedTask;
    }
}