@page "/riders/create"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Set Up Your Profile</h1>

<h2>Rider</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Rider" OnValidSubmit="AddRider" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="ridername" class="form-label">RiderName:</label> 
                <InputText id="ridername" @bind-Value="Rider.RiderName" class="form-control" /> 
                <ValidationMessage For="() => Rider.RiderName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="ridercontact" class="form-label">RiderContact:</label> 
                <InputText id="ridercontact" @bind-Value="Rider.RiderContact" class="form-control" /> 
                <ValidationMessage For="() => Rider.RiderContact" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="riderrating" class="form-label">RiderRating:</label> 
                <InputNumber id="riderrating" @bind-Value="Rider.RiderRating" class="form-control" /> 
                <ValidationMessage For="() => Rider.RiderRating" class="text-danger" /> 
            </div>

            <div class="mb-3" style="display:none;">
                <label for="createdby" class="form-label">CreatedBy:</label>
                <InputText id="createdby" @bind-Value="Rider.CreatedBy" class="form-control" />
                <ValidationMessage For="() => Rider.CreatedBy" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="updatedby" class="form-label">UpdatedBy:</label>
                <InputText id="updatedby" @bind-Value="Rider.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => Rider.UpdatedBy" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="datecreated" class="form-label">DateCreated:</label>
                <InputDate id="datecreated" @bind-Value="Rider.DateCreated" class="form-control" />
                <ValidationMessage For="() => Rider.DateCreated" class="text-danger" />
            </div>
            <div class="mb-3" style="display:none;">
                <label for="dateupdated" class="form-label">DateUpdated:</label>
                <InputDate id="dateupdated" @bind-Value="Rider.DateUpdated" class="form-control" />
                <ValidationMessage For="() => Rider.DateUpdated" class="text-danger" />
            </div>



            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/riders">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? email { get; set; }

    private Rider Rider { get; set; } = new();

    private async Task AddRider()
    {
        using var context = DbFactory.CreateDbContext();

        Rider.CreatedBy = UserId;
        Rider.UpdatedBy = UserId;
        Rider.DateCreated = DateTime.Now;
        Rider.DateUpdated = DateTime.Now;

        context.Rider.Add(Rider);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/riders");
    }
}