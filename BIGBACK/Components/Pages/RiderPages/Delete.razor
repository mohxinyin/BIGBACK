@page "/riders/delete"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Rider</h2>
    <hr />
    @if (rider is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">RiderID</dt>
            <dd class="col-sm-10">@rider.RiderID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RiderName</dt>
            <dd class="col-sm-10">@rider.RiderName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RiderContact</dt>
            <dd class="col-sm-10">@rider.RiderContact</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RiderRating</dt>
            <dd class="col-sm-10">@rider.RiderRating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@rider.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@rider.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@rider.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@rider.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="rider" OnValidSubmit="DeleteRider" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(rider is null)">Delete</button> |
            <a href="/riders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Rider? rider;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        rider = await context.Rider.FirstOrDefaultAsync(m => m.Id == Id);

        if (rider is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRider()
    {
        using var context = DbFactory.CreateDbContext();
        context.Rider.Remove(rider!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/riders");
    }
}
