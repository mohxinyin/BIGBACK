@page "/riders/details"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>👤 Rider Details</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-info">📄 Rider Details</h1>
        <a class="btn btn-secondary" href="/riders">⬅ Back to List</a>
    </div>

    <div class="card shadow-lg p-4 border-primary">
        @if (rider is null)
        {
            <p class="text-center fs-4">⏳ <em>Loading... Please wait</em> ⏳</p>
        }
        else
        {
            <dl class="row">
                <dt class="col-sm-3 fw-bold">👤 Rider Name:</dt>
                <dd class="col-sm-9">@rider.RiderName</dd>

                <dt class="col-sm-3 fw-bold">📞 Contact:</dt>
                <dd class="col-sm-9">@rider.RiderContact</dd>

                <dt class="col-sm-3 fw-bold">⭐ Rating:</dt>
                <dd class="col-sm-9">@rider.RiderRating</dd>
            </dl>

            <div class="d-flex justify-content-end mt-3">
                <a href="@($"/riders/edit?id={rider.Id}")" class="btn btn-warning me-2">✏️ Edit</a>
                <a href="/riders" class="btn btn-secondary">📋 Back to List</a>
            </div>
        }
    </div>
</div>

@code {
    private Rider? rider;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        rider = await context.Rider.FirstOrDefaultAsync(m => m.Id == Id);

        if (rider is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
