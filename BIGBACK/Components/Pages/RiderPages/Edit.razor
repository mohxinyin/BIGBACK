@page "/riders/edit"
@using Microsoft.EntityFrameworkCore
@using BIGBACK.Domain
@inject IDbContextFactory<BIGBACK.Data.BIGBACKContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>✏️ Edit Rider</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-warning">✏️ Edit Rider</h1>
        <a class="btn btn-secondary" href="/riders">⬅ Back to List</a>
    </div>

    @if (Rider is null)
    {
        <p class="text-center fs-4">⏳ <em>Loading... Please wait</em> ⏳</p>
    }
    else
    {
        <div class="card shadow-lg p-4 border-info">
            <EditForm method="post" Model="Rider" OnValidSubmit="UpdateRider" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger fw-bold" role="alert" />

                <input type="hidden" name="Rider.Id" value="@Rider.Id" />

                <div class="mb-3">
                    <label for="ridername" class="form-label">👤 Rider Name:</label>
                    <InputText id="ridername" @bind-Value="Rider.RiderName" class="form-control border-success" />
                    <ValidationMessage For="() => Rider.RiderName" class="text-danger fw-bold" />
                </div>

                <div class="mb-3">
                    <label for="ridercontact" class="form-label">📞 Rider Contact:</label>
                    <InputText id="ridercontact" @bind-Value="Rider.RiderContact" class="form-control border-primary" />
                    <ValidationMessage For="() => Rider.RiderContact" class="text-danger fw-bold" />
                </div>

                <div class="mb-3">
                    <label for="riderrating" class="form-label">⭐ Rider Rating:</label>
                    <InputNumber id="riderrating" @bind-Value="Rider.RiderRating" class="form-control border-warning" />
                    <ValidationMessage For="() => Rider.RiderRating" class="text-danger fw-bold" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary btn-lg">💾 Save Changes</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Rider? Rider { get; set; }

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";

    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        using var context = DbFactory.CreateDbContext();
        Rider ??= await context.Rider.FirstOrDefaultAsync(m => m.Id == Id);

        if (Rider is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateRider()
    {
        using var context = DbFactory.CreateDbContext();

        //Set the userId to the UpdatedBy fields.
        Rider.UpdatedBy = userId;

        //Set the DateUpdated fields to the current date and time.
        Rider.DateUpdated = DateTime.Now;
        context.Attach(Rider!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RiderExists(Rider!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/riders");
    }

    private bool RiderExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Rider.Any(e => e.Id == id);
    }
}
